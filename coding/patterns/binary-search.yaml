name: "binary-search"
flashcards:
  - question: Give a brief description of the binary search algorithm.
    answer: "Binary search is a classic search algorithm that finds the position of a target value within a sorted array (or determines that it isn’t present) by repeatedly dividing the search interval in half. The algorithm compares the target to the middle element of the current range; if the target is smaller, it eliminates the upper half of the range, and if larger, it eliminates the lower half. By continually halving the search space, binary search efficiently locates the target in logarithmic time."
  - question: What is the primary benefit of using binary search?
    answer: "Efficiency: The primary benefit of binary search is its speed in searching sorted data. By halving the search space on each step, it drastically reduces the number of comparisons needed, allowing it to find elements in O(log n) time, which is much faster than a linear scan for large datasets."
  - question: What is the typical time complexity of the binary search algorithm?
    answer: "O(log n): Binary search runs in logarithmic time. Each iteration cuts the array size in half, so the number of comparisons grows very slowly with input size. For example, searching through a list of 1,000,000 elements takes on the order of only 20 comparisons (since 2^20 is about one million)."
  - question: What is the typical space complexity of the binary search algorithm?
    answer: "O(1): Binary search requires only constant extra space. It uses a few index variables (low, high, mid) to track the current search range. If implemented iteratively, it uses no additional stack space. (A recursive implementation would use O(log n) stack space, but the standard iterative approach uses constant space.)"
  - question: When is the binary search algorithm most effective?
    answer: "Sorted data: Binary search is most effective when you have a sorted array or list and need to determine if an element exists or find its index quickly. The array must be sorted (or the search space must be monotonic in some way) for binary search to reliably skip half of the elements at each step."
  - question: What is a typical use case for the binary search algorithm?
    answer: "Element lookup in sorted collections: A typical use case is checking for the presence of a value in a sorted array or list. Binary search is also used to find insertion points (e.g., finding the smallest element greater than X) in sorted data, search in binary search trees, or solve problems where the answer can be determined by ordered comparison (such as finding a threshold value in a monotonic function via binary search)."
  - question: What is the typical implementation of the binary search algorithm?
    answer: "Binary search is usually implemented by using two pointers or indices (often called low and high) to track the current search interval within the array. You compute the mid index between low and high, compare the array[mid] with the target, and then adjust the bounds: if the target is smaller, set high = mid - 1; if larger, set low = mid + 1; if equal, you’ve found the element. This loop continues until the element is found or the interval is empty. This can be done iteratively in a loop or recursively, but the iterative approach is common for simplicity and memory efficiency."